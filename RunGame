import math

class TicTacToe:
    def __init__(self):
        self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

    def clearBoard(self):
        self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

    def addValue(self, xPos: int, yPos: int, playerNum):
        if self.board[xPos][yPos] != 0:
            print("Square has already been claimed, try again!")
            return False
        else:
            self.board[xPos][yPos] = playerNum
            return True

    def __checkValuesForWin(self, val1: int, val2: int, val3: int):
        return val1 == val2 == val3 and val1 != 0

    def checkForWin(self):
        for row in self.board:
            if self.__checkValuesForWin(row[0], row[1], row[2]):
                return row[0]

        for col in range(3):
            if self.__checkValuesForWin(self.board[0][col], self.board[1][col], self.board[2][col]):
                return self.board[0][col]

        if self.__checkValuesForWin(self.board[0][0], self.board[1][1], self.board[2][2]):
            return self.board[0][0]
        if self.__checkValuesForWin(self.board[0][2], self.board[1][1], self.board[2][0]):
            return self.board[0][2]

        return 0

    def isFull(self):
        isFull = True
        for row in self.board:
            for cell in row:
                if cell == 0:
                    isFull = False
                    break
            if not isFull:
                break
        return isFull

    def printBoard(self):
        symbols = {0: '.', 1: 'X', 2: 'O'}
        print("\nCurrent board:")
        for row in self.board:
            print(" ".join(symbols[cell] for cell in row))
        print()


class GameMode:

    def playGame(self):
        game = TicTacToe()
        currentPlayer = 1

        while True:
            game.printBoard()
            print(f"Player {currentPlayer}'s turn (X if 1, O if 2).")

            try:
                xPos = int(input("Enter row (0-2): "))
                yPos = int(input("Enter column (0-2): "))
                if xPos < 0 or xPos > 2 or yPos < 0 or yPos > 2:
                    print("Invalid input! Row and column must be between 0 and 2.")
                    continue
            except ValueError:
                print("Invalid input! Please enter integers.")
                continue

            if not game.addValue(xPos, yPos, currentPlayer):
                continue

            winner = game.checkForWin()
            if winner == 1 or winner == 2:
                game.printBoard()
                print(f"Player {winner} wins!")
                break
            elif game.isFull():
                game.printBoard()
                print("It's a tie!")
                break

            if currentPlayer == 1:
                currentPlayer = 2
            else:
                currentPlayer = 1

    def playGames(self, numGames: int):
        #Add code here
        None
        
    def playUntilWin(self):
        #code here
        None


if __name__ == "__main__":
    gamez = GameMode()
    gamez.playGame()

