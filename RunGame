import math
import time
'''
This game runs fully on the TicTacToe.txt and not the terminal. To get this to work you must save the file after you write your inputs.
We took this approach as we wanted the inputs and the outputs on the same area, instead of inputting on the terminal and then writing on the file.
This approach came with some weirdness regarding the way file updates are handled, and attempting to run user inputs synchronously
'''

class TicTacToe:
    #Makes a 3 by 3 board on which the game will be played on
    #A space with value 0 is unclaimed, marked with 1 is for player 1, and 2 for player 2
    def __init__(self):
        self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] #creates 3 by 3 empty board   (Data collection type #1 List)

    #clear board 
    def clearBoard(self):
        self.board = [[0, 0, 0], [0, 0, 0], [0, 0, 0]] #resets board 

    #add value to board
    def addValue(self, xPos: int, yPos: int, playerNum):
        if self.board[xPos][yPos] != 0: #checks if the square has already been claimed
            #print("Square has already been claimed, try again!")
            return False #allows player to reselect square when playing a game        (Data type#2 Boolean (T/F)
        else:
            self.board[xPos][yPos] = playerNum #square is claimed by player
            return True

    #make checking for wins easy, private method so this should not be called outside of this class
    def __checkValuesForWin(self, val1: int, val2: int, val3: int): #"private" function to make it hard to call outside of the functions in this class
        return val1 == val2 == val3 and val1 != 0

    #checks for win. outputs the winner's number
    def checkForWin(self):
        #checks for wins along rows
        for curRow in self.board: #iterates through each row
            if self.__checkValuesForWin(curRow[0], curRow[1], curRow[2]): #checks if all values in the row are the same
                return curRow[0] #returns the number of the player who has won the game
    
        #checks for wins along columns
        for curCol in range(3): #iterates through each column
            if self.__checkValuesForWin(self.board[0][curCol], self.board[1][curCol], self.board[2][curCol]):
                return self.board[0][curCol] #returns the number of the player who has won the game
      
        #checks for wins along diagonals
        if self.__checkValuesForWin(self.board[0][0], self.board[1][1], self.board[2][2]): #diagonal 1
            return self.board[0][0] #returns the number of the player who has won the game
        if self.__checkValuesForWin(self.board[0][2], self.board[1][1], self.board[2][0]): #diagonal 2
            return self.board[0][2] #returns the number of the player who has won the game

    #checks if board is full. returns Boolean for if it is
    def isFull(self):
        boardIsFull = True #default value to true
        #checks all squares for value of 0, which would indicate that the board is not full
        for row in self.board:
            for cell in row: #Nested Loop
                if cell == 0: #Selection Statement
                    boardIsFull = False
                    break
            if not boardIsFull: #second break so the loop does not continue unnecessarily
                break
        return boardIsFull

    #returns board
    def returnBoard(self):
        return self.board


class GameMode:

    def __init__(self):
        self.symbolDict = {0: '.', 1: 'X', 2: 'O'} #creates dictionary to convert board values to prinable icons (0, 1, 2 -> ., X, O)
        self.waitTime = 4 #time where error messages are displayed for users to read, before being erared

    #for playing the actual game, hurray!
    def playGame(self, startLine: int):
        #initialize the board, player and file
        game = TicTacToe()
        game.clearBoard() #clears board if it was previously played on
        currentPlayer = 1
        userFile = open("TicTacToe.txt", "r+") #r+ so the contents of the file is not deleted

        #skips to the specified start line and sets position for future truncates
        userFile.seek(0, 0) #set cursor to begeining of file
        for curLine in range(startLine):
            userFile.readline()
        truncatePos = userFile.tell() #sets known truncate point for this game

        #loop for running the game. when the game ends, the loop is broken
        while True:
            #delete contents of where board will print
            userFile.flush() #flush to make sure file it updated
            userFile.seek(truncatePos)
            userFile.truncate() #deletes all data after the cursor

            #prints the board onto the file
            userFile.write("Current board:\n")
            for row in game.returnBoard():
                userFile.write(" ".join(self.symbolDict[cell] for cell in row) + '\n')

            #prompts the player to enter their move
            userFile.write(f"Player {self.symbolDict[currentPlayer]}'s turn.\nEnter your move: ")

            #loop to check for user inputs on the file that match the instructions
            while True:
                userFile.flush() #flush to make sure file is updated
                time.sleep(0.1) #delay to prevent CPU overuse and file update delay read errors
                userFile.seek(0, 2) #sets cursor to end of the file

                if userFile.tell() >= 1: #accounts for error where file will read as empty; checks to make sure the file has content to proceed
                    userFile.seek(userFile.tell() - 1)
                    if userFile.read(1) == '\n': #checks if last value is "Enter" key
                        break #stops waiting for user input and moves on to processing

            #reads the user input and then accounts for user input error so they can retry
            try:
                userFile.seek(0, 2) #sets cursor to end of the file
                userFile.seek(userFile.tell() - 4) #goes to 4 values before end of file, 4 because there is "00\r\n" for example
                xPos = int(userFile.read(1))
                yPos = int(userFile.read(1))
                #detects if input is out of range and tells player
                if xPos < 0 or xPos > 2 or yPos < 0 or yPos > 2:
                    userFile.seek(0, 2) #sets cursor to end of the file
                    userFile.write("Invalid input! Row and column must be between 0 and 2.")
                    time.sleep(self.waitTime) #lets user read message before moving on 
                    continue #skips rest of loop to restart process
            except (ValueError, SyntaxError): #ValueError for non-integer values, SyntaxError for weirdness, such as "-" which sometimes would give a SyntaxError
                userFile.seek(0, 2) #sets cursor to end of the file
                userFile.write("Invalid input! Please enter integers.")
                time.sleep(self.waitTime) #lets user read message before moving on 
                continue #skips rest of loop to restart process

            #adds the player input to the board. if the square already has a value, the player is told to retry
            if not game.addValue(xPos, yPos, currentPlayer):
                userFile.write("Square has already been claimed, try again!")
                time.sleep(self.waitTime) #lets user read message before moving on 
                continue #skips rest of loop to restart process

            #check and output winner
            winner = game.checkForWin() #output is the player number who has won, or 0 if there is no winner
            if winner == 1 or winner == 2 or game.isFull(): #ends game if someone has won, or if the game is full
                break
            
            #switches player
            currentPlayer += 1
            if currentPlayer > 2: #eliminates possible weirdness if value is over 2 (but gives player 1 an advantage :)
                currentPlayer = 1
                
        #prints finals board after game has finished.
        userFile.seek(truncatePos)
        userFile.truncate() #deletes all data after the cursor
        userFile.write("Current board:\n")
        for row in game.returnBoard():
            userFile.write(" ".join(self.symbolDict[cell] for cell in row) + '\n')
            
        #prints the winner or a tie
        if winner == 1 or winner == 2:
                userFile.write(f"Player {self.symbolDict[currentPlayer]} wins!")
        elif game.isFull():
            userFile.write("It's a tie!")



if __name__ == "__main__":
    gamez = GameMode()
    userFile = open("TicTacToe.txt", "w")
    userFile.write('This is a TicTacToe game.\nAll inputs should be done on this file, not the terminal.\nWhen inputting values, click the end of the very last line and then write your values.\nYour values should be written in the form row-column like "00" where the first number is the row number, in the range of 0-2, and the second is the column.\nAfter you have typed your input, click "Enter" and then save the file (Ctrl/Command + S).\nHave fun and don\'t cheat!\n\n')
    userFile.seek(0, 0)
    userFile.close() #close file as to not mess up the game
    gamez.playGame(8) #plays the game. line 8 so it does not write on top of the instructions

